ifeq ($(VERBOSE),)
 V=@printf "\033[J  Compiling ==> $(shell basename $<) ...\n"; printf " Compiling all objects...\r";
 Q=@
else
 V=
 Q=
endif

HOSTCC = gcc
CC = gcc
C_FLAGS = -c -MMD -Iinclude/
LD_FLAGS =

# Include source file
ifneq ($(wildcard generated/sources.mk),)
 include generated/sources.mk
else
 SOURCES :=
endif

ifneq ($(wildcard generated/defs.mk),)
 include generated/defs.mk
endif

# Include config file
ifneq ($(wildcard .config),)
 include .config
endif

# Parse build options
# Static link
#  TIPS: It will cause some warnings such as 'Using xxx in statically linked application'
#  TODO: Fix warnings
ifeq ($(CONFIG_DEF_STATIC_LINK),y)
 LD_FLAGS += -static
endif

# Sometimes it will be like 'CONFIG... is not set', and sometimes it will be 'CONFIG_...=""'
# Set to new compiler if CONFIG_C_CPLR is not empty
ifneq ($(CONFIG_C_CPLR),"")
 CC = $(CONFIG_C_CPLR)
 ifeq ($(CONFIG_C_CPLR),)
  CC = gcc
 endif
endif

# Host C compiler is same as above
ifneq ($(CONFIG_HOST_C_CPLR),"")
 HOSTCC = $(CONFIG_HOST_C_CPLR)
 ifeq ($(CONFIG_HOST_C_CPLR),)
  HOSTCC = gcc
 endif
endif

# Strip
ifeq ($(CONFIG_STRIP),y)
 LD_FLAGS += -s
endif

# Compile license
ifeq ($(CONFIG_COMPILE_LICENSE),y)
 C_FLAGS += -DCOMPILE_LICENSE
endif

# Debug support
ifeq ($(CONFIG_DEBUG_SPT),y)
 C_FLAGS += -g
endif

# Debug output
ifeq ($(CONFIG_DEBUG_OUTPUT),y)
 C_FLAGS += -DDEBUG
endif

# Enable all warnings
ifeq ($(CONFIG_WALL),y)
 C_FLAGS += -Wall -Wextra
endif

# Treat warnings as error (-Werror)
ifeq ($(CONFIG_WERROR),y)
 C_FLAGS += -Werror
endif

# Disable support for #warning
ifeq ($(CONFIG_NOWCPP),y)
 C_FLAGS += -Wno-cpp
endif

# Memory leak check
ifeq ($(CONFIG_MEMLEAK_CHECK),y)
 C_FLAGS += -fsanitize=address
 LD_FLAGS += -lasan
endif

C_FLAGS += -DCCVER='"$(shell $(CC) --version | head -n1)"' -DAPPEND='"'$(CONFIG_VERSION_APPEND)'"'

# Redirect objects and dependencies to objs/
OBJS = $(addprefix objs/, $(SOURCES:.c=.o))
DEPS = $(OBJS:.o=.d)

OUTPUT = toolen

.PHONY: all clean cleanall help
all: check $(OUTPUT)

check:
	@if [ ! -f "generated/sources.mk" ]; then \
		echo "No sources.mk file found, please run 'make menuconfig' or 'make allyesconfig' first!"; \
		exit 1; \
	fi

$(OUTPUT): $(OBJS)
	$(Q)printf "  Linking ==> $(OUTPUT)...        \n"
	$(Q)$(CC) -o $(OUTPUT) $(OBJS) $(LD_FLAGS)
	$(Q)printf " All objects was compiled\n"

# Rule to compile .c files into .o files in objs/ directory
objs/%.o: %.c
	@mkdir -p $(dir $@)
	$(V)$(CC) $(C_FLAGS) $< -o $@

clean:
	$(Q)printf "[Clean] $(shell basename $(shell pwd))\n"
	$(Q)rm -rf $(OBJS) $(OUTPUT) $(DEPS) objs/

cleanall: clean kconfig_clean
	$(Q)rm -rf .config generated .config.old .clangd

gen.clangd:
	$(Q)$(RM) -f .clangd
	$(Q)echo "# Generated by Makefile" >> .clangd
	$(Q)sed "s/\$${workspaceFolder}/$(subst /,\/,${PWD})/g" .clangd_template >> .clangd
	$(Q)printf "[Gen] .clangd\n"

help:
	$(Q)echo "  all                 make default target($(OUTPUT))"
	$(Q)echo "  clean               clean all object files and objs/ directory"
	$(Q)echo "  cleanall            clean all object files and .config file"
	$(Q)echo "  menuconfig          configure in a terminal window"
	$(Q)echo "  android_config      generate a config file for Android"
	$(Q)echo "  gnu_hurd_config     generate a config file for GNU/Hurd"
	$(Q)echo "  common_config       generate a common config file"
	$(Q)echo "  android_static_config  same as 'android_config', but statically linked"
	$(Q)echo "  gnu_hurd_static_config same as 'gnu_hurd_config', but statically linked"
	$(Q)echo "  common_static_config   same as 'common_config', but statically linked"
	$(Q)echo "  allyesconfig        generate a config with all commands"
	$(Q)echo "  gen.clangd          generate .clangd file for editors"
	$(Q)echo "  help                show this page"

# menuconfig
-include kconfig/Makefile

# Dependence
-include $(DEPS)
